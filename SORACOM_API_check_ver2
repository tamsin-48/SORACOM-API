var link = '<' + useProperty('googleFormURL') + '|フォームへの回答はこちらから>' //googleフォームのハイパーリンク

function useProperty(key){//スクリプトプロパティ使用の省略
  return PropertiesService.getScriptProperties().getProperty(key);
}


function SendtoSlack(message) {//Slachチャンネルに送信
  var postUrl = useProperty('debug_channel'); //debug用
  //var postUrl = useProperty('main_channel'); //普段はこっち
  var username = 'SORACOMbot';
  var icon = ':soracom:';

  var jsonData ={
     "username" : username,
     "icon_emoji": icon,
     "text" : message
  };
  var payload = JSON.stringify(jsonData);
  var options ={
    "method" : "post",
    "contentType" : "application/json",
    "payload" : payload
  };
  UrlFetchApp.fetch(postUrl, options);
}


function getToken(access_key_id, secret_access_key) {//APIキーとトークンの取得
  var data = {
     authKeyId: access_key_id,
     authKey: secret_access_key,
     tokenTimeoutSeconds: 30,
   };
  var option = {
   method : "post", //メソッドの指定
   payload: JSON.stringify(data), //body情報
   contentType: "application/json",
   muteHttpExceptions: true
 };
 
  var req = UrlFetchApp.fetch("https://api.soracom.io/v1/auth", option);
  var info = JSON.parse(req.getContentText()); //.getContentTextでレスポンステキストを取得
  var apiKey = info.apiKey, token = info.token, flag = false;
  
  if(typeof apiKey == "undefined"){
    var error = info.message;
    var flag = true;
  }
  return [flag, error, apiKey, token];
} 


function port_mapping(new_key, new_token, port, ip , time){//APIからオンデマンドリモートアクセス
 //IPアドレスとポートの取得
  var headers = {
    "Accept": "application/json",
    "X-Soracom-API-Key": new_key,
    "X-Soracom-Token": new_token
   };
  var data = { 
   "destination": {
     "imsi": "440103227906548",
     "port": parseInt(port, 10),
   },
    "duration" : time,
    "source": {
     "ipRanges": [ip]
   },
   "tlsRequired": false
   }
  var option = {
    method : "post", 
    headers : headers,
    payload: JSON.stringify(data), 
    contentType: "application/json",
    muteHttpExceptions: true
  };
  var req = UrlFetchApp.fetch("https://api.soracom.io/v1/port_mappings", option);
  var inf = JSON.parse(req.getContentText());
  var ipadd = inf.ipAddress, port = inf.port, host = inf.hostname, flag = false;
 
 //createPortMappingのエラー処理
  if(typeof ipadd == "undefined"){
    var error = inf.message;
    var flag = true;
  }
   
 return [flag, error, ipadd, port, host];
}


function get_bills(key, token){//請求額の取得
 var headers = {
   "Accept": "application/json",
   "X-Soracom-API-Key": key,
   "X-Soracom-Token": token
  }
 var option = {
   method : "get",
   headers : headers,
   muteHttpExceptions: true
 }
 var req = UrlFetchApp.fetch("https://api.soracom.io/v1/bills/latest", option);
 var inf = JSON.parse(req.getContentText());
 var bill = inf.amount, flag = false;
  
 if(typeof bill == "undefind"){
   var error = inf.message;
   var flag = true;
 }
 return  [flag, error, bill];
}


function onFormSubmit(e){//googleフォームの回答内容の取得
  var itemResponse = e.response.getItemResponses();
  for (var j = 0; j < itemResponse.length; j++){    
   var formData = itemResponse[j];
   var title = formData.getItem().getTitle();
   var response = formData.getResponse();

   switch (title) {
     case "開けるポート番号":
       var open_port = response;
       break;
     case "ポートの使用期間(最大8時間)":
       var time = response;
       var time_cal = time.split(':'); //時間の秒換算
       var open_time = Number(time_cal[0])*3600 + Number(time_cal[1])*60;
       break;
     case "追加アクセス元IPアドレスの範囲をCIDR形式（例：12.34.56.78/30）で入力してください":
       var ip_range = response;
       if(ip_range == "") var ip_range = "131.112.0.0/16";  //IPアドレスレンジが未記入の際は東工大のIPを使用
       break;
    }
  }
  return [open_port, time, open_time, ip_range];
}


function main(e) {
  var keyId = useProperty('soracom_key'), secret = useProperty('soracom_secret_key');
  var key_And_token = getToken(keyId, secret);
  
  if(key_And_token[0]){//get_tokenエラー処理
   var message = "```エラーAPI: ayth\n" + "エラー内容: " + key_And_token[1] + "\n" + link + "```";
   SendtoSlack(message);
   return;
  }
 
  var FormInfo = onFormSubmit(e); 
  var open_port = FormInfo[0], time = FormInfo[1], open_time = FormInfo[2], ip_range = FormInfo[3];
  var access_point = port_mapping(key_And_token[2], key_And_token[3], open_port, ip_range, open_time);
  var bills = get_bills(key_And_token[2], key_And_token[3]);
  
  if(bills[0]){//get_billsエラー処理
    var message = "```エラーAPI: GetLatestBill\n" + "エラー内容: " + bills[1] + "\n" + link + "```";
    SendtoSlack(message);
    return;
  }
//slackに通知
  if(access_point[0]){//port_mappingエラー処理
   var message = "```エラーAPI: CreatePortMapping\n" + "エラー内容: " + access_point[1] + "\n" + link + "```";
   SendtoSlack(message);
   return;
  }

  var body =  "*回答が来ました*\n" + "```■回答内容" + "\n開けるポート番号: " + open_port + "\nポートの使用期間(最大8時間): " + time + "\n追加アクセス元IPアドレス: " + ip_range + "\n\n■接続先" + "\nホスト: " + access_point[4]  + "\nIPアドレス: " + access_point[2] + "\nポート: " + access_point[3] + "\n\n■現在の請求額 : ¥" + bills[2]  + "\n\n" + link + "```";
  SendtoSlack(body);
}
